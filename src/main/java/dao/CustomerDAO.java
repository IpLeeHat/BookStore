package DAO;

import context.DBContext;
import model.Customer;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class CustomerDAO {

    private static final Logger LOGGER = Logger.getLogger(CustomerDAO.class.getName());
    private Connection conn; // üî• TH√äM D√íNG N√ÄY

    public CustomerDAO() {
        try {
            this.conn = DBContext.getConnection(); // üî• K·∫æT N·ªêI DATABASE
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói k·∫øt n·ªëi database!", e);
            throw new RuntimeException("Kh√¥ng th·ªÉ k·∫øt n·ªëi database!", e);
        }
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng
    public List<Customer> getAllCustomers() {
        List<Customer> customers = new ArrayList<>();
        String sql = "SELECT userID, username, phone, email, address, purchasedBook, quantity, totalPrice, role FROM Users";

        try (PreparedStatement ps = conn.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                // S·ª≠a l·∫°i ph·∫ßn n√†y ƒë·ªÉ l·∫•y ƒë√∫ng gi√° tr·ªã role t·ª´ database
                String role = rs.getString("role"); // Gi·ªØ nguy√™n gi√° tr·ªã 0 ho·∫∑c 1

                customers.add(new Customer(
                        rs.getString("userID"),
                        rs.getString("username"),
                        rs.getString("phone"),
                        rs.getString("email"),
                        rs.getString("address"),
                        rs.getString("purchasedBook"),
                        rs.getInt("quantity"),
                        rs.getDouble("totalPrice"),
                        role // Truy·ªÅn th·∫≥ng gi√° tr·ªã role t·ª´ database
                ));
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói l·∫•y danh s√°ch kh√°ch h√†ng", e);
        }
        return customers;
    }

    // X√≥a kh√°ch h√†ng theo username
    public boolean deleteCustomer(String username) {
        if (username == null || username.trim().isEmpty()) {
            LOGGER.warning("Attempt to delete customer with invalid username");
            return false;
        }

        String sql = "DELETE FROM Users WHERE username = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói x√≥a kh√°ch h√†ng: " + username, e);
        }
        return false;
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u c·ªßa kh√°ch h√†ng theo email
    public boolean updatePassword(String email, String newPassword) {
        if (email == null || email.trim().isEmpty() || newPassword == null || newPassword.trim().isEmpty()) {
            LOGGER.warning("Invalid email or password for update");
            return false;
        }

        String query = "UPDATE Users SET Password = ? WHERE Email = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, newPassword);
            ps.setString(2, email);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho email: " + email, e);
        }
        return false;
    }

    // 2. Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t th√¥ng tin customer (QUAN TR·ªåNG)
    public boolean updateCustomer(Customer customer) {
        String sql = "UPDATE Users SET username=?, phone=?, email=?, address=?, role=? WHERE userID=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, customer.getName());
            ps.setString(2, customer.getPhoneNumber());
            ps.setString(3, customer.getEmail());
            ps.setString(4, customer.getAddress());
            ps.setString(5, customer.getRole());
            ps.setString(6, customer.getId());

            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói c·∫≠p nh·∫≠t kh√°ch h√†ng: " + customer.getId(), e);
        }
        return false;
    }

    // 3. Ph∆∞∆°ng th·ª©c ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a (khi update)
    public boolean isEmailExists(String email, String excludeUserId) {
        String sql = "SELECT COUNT(*) FROM Users WHERE email = ? AND userID != ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, email);
            ps.setString(2, excludeUserId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói ki·ªÉm tra email t·ªìn t·∫°i: " + email, e);
        }
        return false;
    }
}
